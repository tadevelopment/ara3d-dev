<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
// MIT License - Copyright (C) Ara 3D, Inc.
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

<# 
var nonVectorTypes = new[] { "int", "long", "float", "double" };
var vectorTypes = new[] { "Vector2", "Vector3", "Vector4" };
var types = nonVectorTypes.Concat(vectorTypes);
var intTypes = new[] { "int", "long" };
var araBinaryOps = new[] { "Add", "Sub", "Mul", "Div" };
var araCompOps = new[] { "Gt", "Lt", "GtEq", "LtEq", "Eq", "NEq" };
var sysUnaryOps = new[] { "Abs", "Acos", "Asin", "Atan", "Cos", "Cosh", "Exp", "Log", "Log10", "Sin", "Sinh", "Sqrt", "Tan", "Tanh" };
var araUnaryOps = new[] { "Sqr", "Inverse", "Ceiling", "Floor", "Round", "Truncate" };
var allUnaryOps = sysUnaryOps.Concat(araUnaryOps);
#>

using System;
using System.Collections.Generic;
using System.Numerics;

namespace Ara3D 
{
<# 
foreach (var t in types) { 
   var capName = char.ToUpper(t[0]) + t.Substring(1);
   var typeName = "Unsafe" + capName + "Array";
#>
	public unsafe class <#= typeName #> : IArray< <#= t #> > 
	{
		public int Count { get; }
		<#= t #>* Ptr { get; }
		public static int ElementSize = sizeof(<#= t #>);
		public <#= t #> this[int n] => Ptr[n];
		public <#= typeName #>(IBytes bytes) 
		  : this(bytes.Ptr.ToPointer(), bytes.ByteCount) 
		{ } 		
		public <#= typeName #>(void* ptr, int size) 
			: this((<#= t #>*)ptr, size / ElementSize) {
		}
		public <#= typeName #>(<#= t #>* ptr, int count) {
			Ptr = ptr;
			Count = count;
		} 
		/// <summary>Returns an interface to the bytes, be careful that the internal memory does not last longer than the consumer expected</summary>
		public IBytes ToBytes() {
			return new IntPtrWrapper(new IntPtr(Ptr), Count * ElementSize);
		}
	}
<#
}
#>
	
	public static class UnsafeArrayExtensions 
	{
<# 
foreach (var t in types) { 
   var capName = char.ToUpper(t[0]) + t.Substring(1);
   var typeName = "Unsafe" + capName + "Array";
#>
		public static <#= typeName #> To<#= capName #>s(this IBytes bytes) => new <#= typeName #>(bytes);
<#
}
#>
	}

	public static class ArrayOps
	{
	
<# 
foreach (var t in types) { 
foreach (var op in new[] { "Add", "Mul", "Sub", "Div" }) 
{
#>
		public static IArray< <#= t #> > <#= op #>(this IArray< <#= t #> > self, IArray< <#= t #> > other) { return self.Zip(other, MathOps.<#= op #>); }
		public static IArray< <#= t #> > <#= op #>(this IArray< <#= t #> > self, <#= t #> scalar) { return self.Select(x => MathOps.<#= op #>(x, scalar)); }
		public static IArray< <#= t #> > <#= op #>(this <#= t #> self, IArray< <#= t #> > vector) { return vector.Select(x => MathOps.<#= op #>(self, x)); }
<#
} 
}
foreach (var op in allUnaryOps) {
#>

        public static IArray<double> <#= op #> (this IArray< double > self) { return self.Select(MathOps.<#= op #>); }
        public static IArray<float> <#= op #> (this IArray< float > self) { return self.Select(MathOps.<#= op #>); }
        public static IArray<Vector2> <#= op #> (this IArray< Vector2 > self) { return self.Select(MathOps.<#= op #>); }
        public static IArray<Vector3> <#= op #> (this IArray< Vector3 > self) { return self.Select(MathOps.<#= op #>); }
        public static IArray<Vector4> <#= op #> (this IArray< Vector4 > self) { return self.Select(MathOps.<#= op #>); }
<#
}
#>

		public static long Sum(this IArray<int> self) { return self.Aggregate(0L, (x, y) => x + y); }
		public static long Sum(this IArray<long> self) { return self.Aggregate(0L, (x, y) => x + y); }
		public static double Sum(this IArray<float> self) { return self.Aggregate(0.0, (x, y) => x + y); }
		public static double Sum(this IArray<double> self) { return self.Aggregate(0.0, (x, y) => x + y); }
		public static Vector2 Sum(this IArray<Vector2> self) { return self.Aggregate(Vector2.Zero, (x, y) => x + y); }
		public static Vector3 Sum(this IArray<Vector3> self) { return self.Aggregate(Vector3.Zero, (x, y) => x + y); }
		public static Vector4 Sum(this IArray<Vector4> self) { return self.Aggregate(Vector4.Zero, (x, y) => x + y); }
		
		public static double Average(this IArray<int> self) { return self.Sum() / self.Count; }
		public static double Average(this IArray<long> self) { return self.Sum() / self.Count; }
		public static double Average(this IArray<float> self) { return self.Sum() / self.Count; }
		public static double Average(this IArray<double> self) { return self.Sum() / self.Count; }
		public static Vector2 Average(this IArray<Vector2> self) { return self.Sum() / self.Count; }
		public static Vector3 Average(this IArray<Vector3> self) { return self.Sum() / self.Count; }
		public static Vector4 Average(this IArray<Vector4> self) { return self.Sum() / self.Count; }	

		public static double Variance(this IArray<int> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
		public static double Variance(this IArray<long> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
		public static double Variance(this IArray<float> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
		public static double Variance(this IArray<double> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
		public static Vector2 Variance(this IArray<Vector2> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
		public static Vector3 Variance(this IArray<Vector3> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
		public static Vector4 Variance(this IArray<Vector4> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }

		public static double StdDev(this IArray<int> self) { return self.Variance().Sqrt(); }
		public static double StdDev(this IArray<long> self) { return self.Variance().Sqrt(); }
		public static double StdDev(this IArray<float> self) { return self.Variance().Sqrt(); }
		public static double StdDev(this IArray<double> self) { return self.Variance().Sqrt(); }
		public static Vector2 StdDev(this IArray<Vector2> self) { return self.Variance().Sqrt(); }
		public static Vector3 StdDev(this IArray<Vector3> self) { return self.Variance().Sqrt(); }
		public static Vector4 StdDev(this IArray<Vector4> self) { return self.Variance().Sqrt(); }

		public static IArray<int> PartialSums(this IArray<int> self) { return self.Accumulate((x, y) => x + y); }
		public static IArray<long> PartialSums(this IArray<long> self) { return self.Accumulate((x, y) => x + y); }
		public static IArray<float> PartialSums(this IArray<float> self) { return self.Accumulate((x, y) => x + y); }
		public static IArray<double> PartialSums(this IArray<double> self) { return self.Accumulate((x, y) => x + y); }
		public static IArray<Vector2> PartialSums(this IArray<Vector2> self) { return self.Accumulate((x, y) => x + y); }
		public static IArray<Vector3> PartialSums(this IArray<Vector3> self) { return self.Accumulate((x, y) => x + y); }
		public static IArray<Vector4> PartialSums(this IArray<Vector4> self) { return self.Accumulate((x, y) => x + y); }
		
	} 
} 
