<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHelpers.tt" #>  
// AUTOGENERATED FILE: Do not edit directly, instead edit Structs.tt

// MIT License - Copyright (C) Ara 3D, Inc.
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

using System; 
using System.Numerics;   
namespace Ara3D  
{
<#
	// Various types of intervals (and bounding structs)
	CreateRangeStruct("Interval", "float");
	CreateRangeStruct("Box", "Vector3");    
	CreateRangeStruct("Box2", "Vector2");    
	CreateRangeStruct("Box4", "Vector4"); 

	// These are common structs 
	CreateStruct("Ray", new[] { "Position", "Direction" }, new[] { "Vector3", "Vector3" });
	CreateStruct("Planed", new[] { "Normal", "D" }, new[] { "Vector3d", "double" });
	CreateStruct("Sphere", new[] { "Center", "Radius" }, new[] { "Vector3", "float" });
	
	// These have surface areas and midpoints and bounding boxes
	CreateShapeStruct("Line", new[] { "A", "B" }, "Vector3");    
	CreateShapeStruct("Triangle", new[] { "A", "B", "C" }, "Vector3");
	CreateShapeStruct("Triangle2", new[] { "A", "B", "C" }, "Vector2");
	CreateShapeStruct("Quad", new[] { "A", "B", "C", "D" }, "Vector3");

	// These are plain old vector types (they will need mathematical operators)
	 CreateVectorStruct("Int2", new[] { "A", "B" }, "int");    
	CreateVectorStruct("Int3", new[] { "A", "B", "C" }, "int");    
	CreateVectorStruct("Int4", new[] { "A", "B", "C", "D" }, "int");    	
	CreateVectorStruct("Vector3d", new[] { "X", "Y", "Z" }, "double");    
	CreateVectorStruct("Quaterniond", new[] { "X", "Y", "Z", "W" }, "double");

	// TODO: the double operators are not yet finished.
#>
}